Day 1: On-Premise Environment
Challenges: High cost, maintenance (software/hardware), scalability issues, underutilization.
Virtualization:
Hypervisor software is required to create isolated VMs.
Standalone virtualization risks downtime if the physical hardware fails.
Private Cloud: Highly available clusters managed with tools like System Center, OpenStack, VMware vSphere, or Azure Stack.
Day 2: Public Cloud
Advantages:
No CapEx, guaranteed scalability, no resource underutilization.
Managed by cloud providers (AWS, Azure, IBM).
Shared Responsibility Model: Security is a shared responsibility between the customer and the cloud provider.
Azure Features:
Pay-as-you-go, hybrid benefits for licensing, global regions for VM creation.
Deployment models: IaaS, PaaS, SaaS.
Day 3: Service Models
IaaS: Provides VMs; user manages OS and runtime.
PaaS: Platform for application development (e.g., App Services, SQL Database).
SaaS: Fully managed applications (e.g., Office 365, Google Drive).
Day 4: Azure Hierarchy and Identity
Hierarchy: Subscription → Resource Groups → Resources.
Tenancy: Azure Entra ID creates a tenant representing the organization.
Subscription Types: Free Trial, Pay-as-you-go, Cloud Solution Partner, Student.
Azure Policy: Used for governance, e.g., enabling Defender for Cloud for all subscriptions.
Day 6-7: Azure CLI & PowerShell
CLI Commands:
az account list, az group create, az group delete, az vm create.
PowerShell Commands:
Get-AzSubscription, New-AzResourceGroup, New-AzVM.
VM Connectivity:
Windows VM: Connect via RDP.
Linux VM: Use SSH tools like MobaXterm.
Day 8-9: Azure Disks
Types: OS Disk, Data Disk, Temporary Disk.
Disk Operations: Add disks, change sizes (requires deallocation for OS disks).
Snapshots: Create point-in-time copies for recovery.
Availability Sets: Protect against planned maintenance and hardware failures.
Day 11-14: Azure Storage
Types: Blob, File, Table, Queue.
Access Tiers: Hot, Cool, Archive (rehydration required for Archive).
Replication: LRS, ZRS, GRS, RA-GRS, etc., based on redundancy needs.
Migration: Use tools like AzCopy, Azure File Sync, Data Box for data migration.
Day 15: Azure App Services and Containers
App Services: Managed platform for web apps, deployment slots for testing.
Containers:
Create images locally with Docker and push to Azure Container Registry.
Deploy images as Azure Container Instances or Kubernetes pods.
Day 16: Networking
IP Addressing:
IPv4 (32-bit) and IPv6 (128-bit).
Classes: A, B, C for network and host differentiation.
Subnetting: Reduces IP wastage; enables private communication within defined ranges.
Reserved IPs:
Public IP: Used in WAN.
Private IP: Used in LAN.
NAT (Network Address Translation): Converts private IPs to public IPs for external communication.
Azure VNet: Virtual networks in Azure for resource isolation and communication.

Network Basics
WAN (Wide Area Network): Connectivity to the internet, uses public IP addresses.
LAN (Local Area Network): Private internal network, uses private IP addresses.
Azure Virtual Network (VNet)
Definition: A VNet is a private network in Azure, equivalent to a LAN in on-premises environments.
Scope: VNets are region-specific (e.g., a VM in South India can't connect to a VNet in Central India directly).
Address Pool: Defines the range of private IPs for the VNet.
Subnets are created from this pool.
Example: VNet with 10.0.0.0/16, Subnet1 with 10.0.0.0/24, Subnet2 with 10.0.1.0/24.
Creating a VNet in Azure
Go to Azure Portal: Search for "Virtual Network".

Create a New VNet:

Select your subscription.
Create/select a resource group.
Name your VNet (e.g., MyVNet).
Choose a region (e.g., Central India).
Define the IP address pool (e.g., 10.0.0.0/16).
Rename the default subnet (e.g., VMSubnet).
Add additional subnets (e.g., TestSubnet with a non-overlapping CIDR range).
Review and Create: Finalize the settings and deploy the VNet.

Virtual Machines in VNets
Private IPs: Assigned from the subnet, default to dynamic but can be changed to static.
Public IPs: Used for external communication, default to static.
To change private IP allocation:
Navigate to the VM's network interface card.
Go to IP configuration settings.
Change IP allocation from dynamic to static.
Subnets and Communication
Within the Same VNet:
Communication between subnets in the same VNet is allowed by default.
Azure manages routing with system-assigned routes.
Between Different VNets:
No communication by default.
VNet Peering is required to enable communication.
Testing Connectivity
VM to VM (Same Subnet):
Use private IPs for communication.
VM to VM (Different Subnets, Same VNet):
Allowed by default.
Use RDP with private IP.
Example: mstsc /v:<private-ip-of-vm>.
Public IP and Internet Access
If a VM's public IP is removed:
The VM can still access the internet.
A random public IP is assigned by Azure for outbound connections.
This behavior is managed by the default VNet settings.
Hands-On Example
Create two VMs:
VM1 in VMSubnet.
VM2 in TestSubnet.
Access:
Take RDP to VM1 using its public IP.
From VM1, take RDP to VM2 using its private IP.
Test Internet:
Open a browser on either VM and search "What is my IP?".
Even without a public IP on the VM, it will show an outbound public IP assigned by Azure.



Notes on VNet-to-VNet Connectivity, DNS, and VPN in Azure
1. VNet-to-VNet Connectivity Using Gateway Device
Key Concepts:

VNet Peering: Allows communication between resources in different VNets, connected over the Azure backbone. It requires non-overlapping address spaces.
VNet-to-VNet using Gateway: Involves creating a secure, encrypted tunnel between two VNets over the internet.
Steps:

Create VNets:

Go to Azure Portal > Virtual Networks and create two VNets in different regions (e.g., Central India and Central US).
Make sure the address spaces are non-overlapping. For example, VNet 1 might have the address space 10.0.0.0/16 and VNet 2 10.1.0.0/16.
Create Gateway Subnet:

For VPN Gateway configuration, you need to create a Gateway Subnet in each VNet. This subnet should have a specific address range.
Go to the Subnets section of your VNet and add a Gateway subnet. Azure reserves certain address ranges for this subnet.
Deploy Virtual Network Gateways:

Go to Virtual Network Gateway in Azure Portal and deploy a VPN Gateway.
Choose the appropriate VPN type (Route-based or Policy-based). Ensure Active-Active mode is disabled.
Set up the VPN tunnel to allow communication between the two VNets via the virtual network gateways.
Create VNet Peering:

Go to VNet Peering in the Azure Portal and create a peering connection between the two VNets, ensuring that both VNets can route traffic to each other.
Set up bi-directional traffic and configure remote gateway for cross-region peering if needed.
Testing:

Create VMs in both VNets, one in Central India and one in Central US.
Test connectivity using tools like ping, tracert, or PowerShell’s Test-NetConnection to verify VNet-to-VNet connectivity.
2. VPN Connections
Key Types:

Site-to-Site VPN (S2S): This type of VPN connects your on-premises network to your Azure VNet. Typically, you need an on-premises VPN device that supports IPsec or IKEv2.
Point-to-Site VPN (P2S): Used for individual devices (e.g., laptops or workstations) to securely connect to Azure. You’ll use a VPN client on the device to establish the connection.
Steps:

Site-to-Site (S2S) VPN:
Configure VPN devices on both ends (on-premises and Azure) to establish a secure tunnel.
In Azure, create a Virtual Network Gateway and configure the connection type (IPsec/IKEv2).
Point-to-Site (P2S) VPN:
Set up a VPN client on the individual device that you want to connect to Azure.
The VPN client will authenticate using certificates and establish a secure connection to Azure.
3. DNS Configuration
Key Concepts:

DNS (Domain Name System): Translates domain names (e.g., example.com) into IP addresses, allowing users and devices to access websites or services using human-readable addresses.
Azure DNS: Azure provides both Public DNS for global internet traffic and Private DNS for internal Azure VNet communication.
Public DNS Configuration:

Create DNS Zone in Azure:

In Azure Portal, go to DNS Zones and create a new DNS zone (e.g., example.com).
Create A Record in Azure DNS:

In the created DNS zone, add an A record that maps a hostname (e.g., www) to the public IP address of your Azure VM.
Update DNS Records in GoDaddy:

Log into GoDaddy and go to the DNS settings for your domain.
Update the nameservers to point to Azure’s DNS servers (you can find Azure's nameservers in the Azure DNS Zone properties).
Private DNS Configuration:

Create Private DNS Zone:
In Azure, create a Private DNS Zone for internal DNS resolution (e.g., internal.example.com).
Link DNS Zone to VNet:
In the DNS zone, go to Virtual Network Links and link the zone to the appropriate VNets for internal resolution.
NSLookup Testing:
From a VM in the linked VNet, use nslookup to verify that the VM can resolve names from the private DNS zone.
Example: nslookup indvm.simplykloud.com will resolve to the private IP of indvm.
4. IIS Web Server Installation on VM
Steps:

Install IIS on Windows VM:
Log into the Windows VM.
Run the following PowerShell command to install the IIS Web Server:
powershell
Copy
Install-WindowsFeature -Name Web-Server -IncludeManagementTools
Configure Network Security Group (NSG):
Ensure that the NSG associated with the VM allows inbound HTTP traffic (port 80).
Test Web Server:
Open a browser and access the VM’s public IP to confirm IIS is up and running.
You should see the default IIS landing page.
5. Configuring A Record in GoDaddy (DNS)
Login to GoDaddy:
Go to GoDaddy and log into your account.
Create an A Record:
Navigate to DNS Management for your domain.
Add an A record that points to the public IP address of the VM running the IIS Web Server.
Update Name Servers:
In GoDaddy, update the Name Servers for your domain to those provided by Azure DNS.
Summary Checklist for Setting Up VNet Peering and VPN:
VNet Peering:

Ensure VNets have non-overlapping address spaces.
Set up peering connections and routes between VNets.
Gateway Subnets:

Add a gateway subnet to each VNet.
VPN Gateways:

Deploy VPN gateways and create connections.
DNS Configuration:

Create public and/or private DNS zones.
Set up necessary A records and link them to VNets.
IIS Installation:

Install IIS on a VM and verify by accessing via HTTP.


Network Security Groups (NSG), Route Tables, and Bastion in Azure
1. Network Security Group (NSG)
Key Concepts:

Network Security Group (NSG) is a fundamental component in Azure’s security architecture that acts as a traffic filter to control inbound and outbound traffic to and from Azure resources.
NSGs can be applied to both:
Subnets: Controls traffic flow at the subnet level.
Network Interface Cards (NICs): Controls traffic flow at the individual VM level.
Key Features:

Inbound and Outbound Rules: NSGs define access rules that either allow or deny traffic based on specific criteria like source, destination, ports, protocols, and priority.
Traffic Filtering: NSGs use ACLs (Access Control Lists) to control network traffic to/from resources within a VNet or between VNets.
Important Components:

Source and Destination: You can specify where the traffic is coming from (source) and where it's going (destination), for example, IP address, subnet, or tag.
Port and Protocol: You can specify which ports (e.g., HTTP – 80, HTTPS – 443) and which protocols (TCP, UDP) the traffic should use.
Priority: Rules are evaluated in priority order (lower numbers have higher priority). If two rules overlap, the one with the lower priority is applied.
Action: Defines what to do with the traffic. It can either be Allow or Deny.
Example Usage:

Inbound Rule: Allow traffic from any source on port 80 (HTTP) to a web server.
Outbound Rule: Deny traffic from the subnet to the internet.
Steps to Create NSG:

Go to the Azure Portal.
Navigate to Network Security Groups.
Click Create and configure the NSG.
Add Inbound and Outbound rules based on your needs, defining ports, protocols, and source/destination.
Associate the NSG with the desired Subnet or Network Interface of your VM.
Block Traffic Between Subnets in the Same VNet:

You can block traffic between subnets in the same VNet by creating a Deny rule in the NSG of the subnets to control communication between them.
2. Route Table
Key Concepts:

Routing in Azure is handled by Route Tables. By default, Azure automatically provides system routes for intra-VNet communication, but you can define User-Defined Routes (UDRs) to customize routing within your network.
UDRs (User Defined Routes) are custom routes created to manage the flow of traffic between subnets, VNets, and even on-premises networks.
Types of Routes:

System Routes: These are automatically created by Azure, allowing connectivity between VMs in the same VNet and between VNets.
User-Defined Routes (UDRs): You can create custom routes for specific network traffic, such as routing traffic through a Network Virtual Appliance (e.g., firewall) or using Azure VPN Gateway.
Routing Example:

A Route Table can be created to direct all outbound traffic from a subnet to a Firewall or Network Virtual Appliance (NVA).
You might have a custom route like:
Destination: 0.0.0.0/0 (default route for all traffic)
Next Hop: IP address of the Firewall or NVA.
Steps to Create a Route Table:

Go to the Azure Portal and navigate to Route Tables.
Click Create and configure the route table with the desired routes.
Associate the route table with specific Subnets or VNets as needed.
3. Azure Bastion
Key Concepts:

Azure Bastion is a fully managed Platform-as-a-Service (PaaS) offering that allows secure and seamless RDP/SSH access to Azure Virtual Machines without requiring a public IP address.
Bastion provides a jump server functionality, enabling users to connect to their VMs over SSL (HTTPS), protecting the VM from the direct exposure of the internet.
Benefits:

Secure Remote Access: Bastion uses SSL to securely connect to Azure VMs without requiring public IP addresses, reducing the attack surface.
No Exposure to Public Internet: VMs in private subnets don’t need a public IP, as Bastion acts as a gateway for accessing those resources.
Easy to Use: You can access VMs directly from the Azure Portal.
Steps to Set Up Azure Bastion:

Go to the Azure Portal and navigate to Bastion.
Click Create and choose the VNet where the Bastion service will be deployed.
Create a Bastion subnet (AzureBastionSubnet) in your VNet, which is required for Bastion to work.
Deploy Bastion into the subnet and configure necessary permissions.
Once Bastion is deployed, you can access your VM by selecting the Connect button in the Azure Portal, and then choosing Bastion for RDP/SSH access.
Summary: Key Concepts
Network Security Groups (NSG):

Controls inbound and outbound traffic at the VM NIC or Subnet level.
Allows you to define rules based on source/destination, ports, protocols, and priorities.
Can be used to block traffic between subnets in the same VNet.
Route Tables:

Defines routing behavior within Azure.
System routes are automatically provided, but you can create User Defined Routes (UDRs) for specific needs (e.g., traffic redirection to a firewall).
Azure Bastion:

Securely connects to VMs using RDP or SSH via the Azure Portal.
No need for public IP addresses on VMs.
Acts as a jump server, reducing exposure to the public internet.
These services together provide robust security and connectivity control within Azure. By leveraging NSGs for traffic filtering, Route Tables for custom routing, and Azure Bastion for secure remote access, you can ensure that your Azure environment is secure and efficiently managed